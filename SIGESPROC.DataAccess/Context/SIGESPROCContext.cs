// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using SIGESPROC.DataAccess;
using SIGESPROC.Entities.Entities;

#nullable disable

namespace SIGESPROC.DataAccess.Context
{
    public partial class SIGESPROCContext : DbContext
    {
        public SIGESPROCContext()
        {
        }

        public SIGESPROCContext(DbContextOptions<SIGESPROCContext> options)
            : base(options)
        {
        }

        public virtual DbSet<tbAbonosPorPrestamos> tbAbonosPorPrestamos { get; set; }
        public virtual DbSet<tbAbonosPorPrestamos_Bitacora> tbAbonosPorPrestamos_Bitacora { get; set; }
        public virtual DbSet<tbActividades> tbActividades { get; set; }
        public virtual DbSet<tbActividadesPorEtapas> tbActividadesPorEtapas { get; set; }
        public virtual DbSet<tbAgentesBienesRaices> tbAgentesBienesRaices { get; set; }
        public virtual DbSet<tbAlertas> tbAlertas { get; set; }
        public virtual DbSet<tbBancos> tbBancos { get; set; }
        public virtual DbSet<tbBienesRaices> tbBienesRaices { get; set; }
        public virtual DbSet<tbBitacoraInsumos> tbBitacoraInsumos { get; set; }
        public virtual DbSet<tbBitacoraTasasCambio> tbBitacoraTasasCambio { get; set; }
        public virtual DbSet<tbBodegas> tbBodegas { get; set; }
        public virtual DbSet<tbBodegasPorInsumo> tbBodegasPorInsumo { get; set; }
        public virtual DbSet<tbCargos> tbCargos { get; set; }
        public virtual DbSet<tbCategorias> tbCategorias { get; set; }
        public virtual DbSet<tbCategoriasViaticos> tbCategoriasViaticos { get; set; }
        public virtual DbSet<tbCategoriasViaticos_Bitacora> tbCategoriasViaticos_Bitacora { get; set; }
        public virtual DbSet<tbCiudades> tbCiudades { get; set; }
        public virtual DbSet<tbClientes> tbClientes { get; set; }
        public virtual DbSet<tbComprasDetalle> tbComprasDetalle { get; set; }
        public virtual DbSet<tbComprasDetallesDirecciones> tbComprasDetallesDirecciones { get; set; }
        public virtual DbSet<tbComprasDetallesDireccionesPorMaquinaria> tbComprasDetallesDireccionesPorMaquinaria { get; set; }
        public virtual DbSet<tbComprasEncabezado> tbComprasEncabezado { get; set; }
        public virtual DbSet<tbControlDeCalidadesPorActividades> tbControlDeCalidadesPorActividades { get; set; }
        public virtual DbSet<tbCostoPorActividad> tbCostoPorActividad { get; set; }
        public virtual DbSet<tbCostoPorActividad_Bitacora> tbCostoPorActividad_Bitacora { get; set; }
        public virtual DbSet<tbCotizaciones> tbCotizaciones { get; set; }
        public virtual DbSet<tbCotizacionesDetalle> tbCotizacionesDetalle { get; set; }
        public virtual DbSet<tbCotizacionesPorDocumentos> tbCotizacionesPorDocumentos { get; set; }
        public virtual DbSet<tbDeducciones> tbDeducciones { get; set; }
        public virtual DbSet<tbDeduccionesPorEmpleados> tbDeduccionesPorEmpleados { get; set; }
        public virtual DbSet<tbDeduccionesPorEmpleados_Bitacora> tbDeduccionesPorEmpleados_Bitacora { get; set; }
        public virtual DbSet<tbDeduccionesPorPlanilla> tbDeduccionesPorPlanilla { get; set; }
        public virtual DbSet<tbDeduccionesPorPlanilla_Bitacora> tbDeduccionesPorPlanilla_Bitacora { get; set; }
        public virtual DbSet<tbDeducciones_Bitacora> tbDeducciones_Bitacora { get; set; }
        public virtual DbSet<tbDocumentos> tbDocumentos { get; set; }
        public virtual DbSet<tbDocumentosBienRaiz> tbDocumentosBienRaiz { get; set; }
        public virtual DbSet<tbEmpleados> tbEmpleados { get; set; }
        public virtual DbSet<tbEmpleados_Bitacora> tbEmpleados_Bitacora { get; set; }
        public virtual DbSet<tbEmpresasBienesRaices> tbEmpresasBienesRaices { get; set; }
        public virtual DbSet<tbEquiposSeguridad> tbEquiposSeguridad { get; set; }
        public virtual DbSet<tbEquiposSeguridadPorActividades> tbEquiposSeguridadPorActividades { get; set; }
        public virtual DbSet<tbEquiposSeguridadPorBodegas> tbEquiposSeguridadPorBodegas { get; set; }
        public virtual DbSet<tbEquiposSeguridadPorProveedores> tbEquiposSeguridadPorProveedores { get; set; }
        public virtual DbSet<tbEstados> tbEstados { get; set; }
        public virtual DbSet<tbEstadosCiviles> tbEstadosCiviles { get; set; }
        public virtual DbSet<tbEstadosProyectos> tbEstadosProyectos { get; set; }
        public virtual DbSet<tbEtapas> tbEtapas { get; set; }
        public virtual DbSet<tbEtapasPorProyectos> tbEtapasPorProyectos { get; set; }
        public virtual DbSet<tbFletesControlCalidad> tbFletesControlCalidad { get; set; }
        public virtual DbSet<tbFletesDetalle> tbFletesDetalle { get; set; }
        public virtual DbSet<tbFletesEncabezado> tbFletesEncabezado { get; set; }
        public virtual DbSet<tbFrecuencias> tbFrecuencias { get; set; }
        public virtual DbSet<tbFrecuencias_Bitacora> tbFrecuencias_Bitacora { get; set; }
        public virtual DbSet<tbGestionRiesgos> tbGestionRiesgos { get; set; }
        public virtual DbSet<tbGestionesAdicionales> tbGestionesAdicionales { get; set; }
        public virtual DbSet<tbImagenesPorControlesDeCalidades> tbImagenesPorControlesDeCalidades { get; set; }
        public virtual DbSet<tbImagenesPorGestionesAdicionales> tbImagenesPorGestionesAdicionales { get; set; }
        public virtual DbSet<tbImagenesPorIncidencias> tbImagenesPorIncidencias { get; set; }
        public virtual DbSet<tbImagenesPorProcesosVentas> tbImagenesPorProcesosVentas { get; set; }
        public virtual DbSet<tbImpuestos> tbImpuestos { get; set; }
        public virtual DbSet<tbImpuestos_Bitacora> tbImpuestos_Bitacora { get; set; }
        public virtual DbSet<tbIncidenciasPorActividades> tbIncidenciasPorActividades { get; set; }
        public virtual DbSet<tbIncidenciasPorFletes> tbIncidenciasPorFletes { get; set; }
        public virtual DbSet<tbIncidentes> tbIncidentes { get; set; }
        public virtual DbSet<tbInsumos> tbInsumos { get; set; }
        public virtual DbSet<tbInsumosPorActividades> tbInsumosPorActividades { get; set; }
        public virtual DbSet<tbInsumosPorMedidas> tbInsumosPorMedidas { get; set; }
        public virtual DbSet<tbInsumosPorProveedores> tbInsumosPorProveedores { get; set; }
        public virtual DbSet<tbMantenimientos> tbMantenimientos { get; set; }
        public virtual DbSet<tbMaquinarias> tbMaquinarias { get; set; }
        public virtual DbSet<tbMaquinariasPorProveedores> tbMaquinariasPorProveedores { get; set; }
        public virtual DbSet<tbMateriales> tbMateriales { get; set; }
        public virtual DbSet<tbMetodosPago> tbMetodosPago { get; set; }
        public virtual DbSet<tbMonedas> tbMonedas { get; set; }
        public virtual DbSet<tbNiveles> tbNiveles { get; set; }
        public virtual DbSet<tbNotificaciones> tbNotificaciones { get; set; }
        public virtual DbSet<tbNotificacionesAlertarPorUsuario> tbNotificacionesAlertarPorUsuario { get; set; }
        public virtual DbSet<tbPagos> tbPagos { get; set; }
        public virtual DbSet<tbPaises> tbPaises { get; set; }
        public virtual DbSet<tbPantallas> tbPantallas { get; set; }
        public virtual DbSet<tbPantallasPorRoles> tbPantallasPorRoles { get; set; }
        public virtual DbSet<tbPlanillaDetalles> tbPlanillaDetalles { get; set; }
        public virtual DbSet<tbPlanillaDetalles_Bitacora> tbPlanillaDetalles_Bitacora { get; set; }
        public virtual DbSet<tbPlanillas> tbPlanillas { get; set; }
        public virtual DbSet<tbPlanillas_Bitacora> tbPlanillas_Bitacora { get; set; }
        public virtual DbSet<tbPrestamos> tbPrestamos { get; set; }
        public virtual DbSet<tbPrestamos_Bitacora> tbPrestamos_Bitacora { get; set; }
        public virtual DbSet<tbPresupuestosDetalle> tbPresupuestosDetalle { get; set; }
        public virtual DbSet<tbPresupuestosEncabezado> tbPresupuestosEncabezado { get; set; }
        public virtual DbSet<tbPresupuestosPorTasasCambio> tbPresupuestosPorTasasCambio { get; set; }
        public virtual DbSet<tbProcesosVentas> tbProcesosVentas { get; set; }
        public virtual DbSet<tbProveedores> tbProveedores { get; set; }
        public virtual DbSet<tbProyectos> tbProyectos { get; set; }
        public virtual DbSet<tbProyectosConstruccionBienesRaices> tbProyectosConstruccionBienesRaices { get; set; }
        public virtual DbSet<tbReferenciasCeldas> tbReferenciasCeldas { get; set; }
        public virtual DbSet<tbRentaMaquinariasPorActividades> tbRentaMaquinariasPorActividades { get; set; }
        public virtual DbSet<tbRetrasos> tbRetrasos { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbSubcategorias> tbSubcategorias { get; set; }
        public virtual DbSet<tbTasasCambio> tbTasasCambio { get; set; }
        public virtual DbSet<tbTerrenos> tbTerrenos { get; set; }
        public virtual DbSet<tbTiposDocumentos> tbTiposDocumentos { get; set; }
        public virtual DbSet<tbTiposProyecto> tbTiposProyecto { get; set; }
        public virtual DbSet<tbTokens> tbTokens { get; set; }
        public virtual DbSet<tbUnidadesMedida> tbUnidadesMedida { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }
        public virtual DbSet<tbViaticosDetalles> tbViaticosDetalles { get; set; }
        public virtual DbSet<tbViaticosDetalles_Bitacora> tbViaticosDetalles_Bitacora { get; set; }
        public virtual DbSet<tbViaticosEncabezados> tbViaticosEncabezados { get; set; }
        public virtual DbSet<tbViaticosEncabezados_Bitacora> tbViaticosEncabezados_Bitacora { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<tbAbonosPorPrestamos>(entity =>
            {
                entity.HasKey(e => e.abpr_Id)
                    .HasName("PK__tbAbonos__0DF92E8A3AD8B2DA");

                entity.ToTable("tbAbonosPorPrestamos", "Nomi");

                entity.Property(e => e.abpr_Fecha).HasColumnType("datetime");

                entity.Property(e => e.abpr_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.abpr_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.abpr_MontoAbonado).HasColumnType("money");

                //entity.Property(e => e.accion)
                //    .HasMaxLength(1)
                //    .IsUnicode(false);

                entity.HasOne(d => d.pres)
                    .WithMany(p => p.tbAbonosPorPrestamos)
                    .HasForeignKey(d => d.pres_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__tbAbonosPorPrestamos_tbPrestamos_pres_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbAbonosPorPrestamosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbAbonosPorPrestamos_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbAbonosPorPrestamosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Nomi_tbAbonosPorPrestamos_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbAbonosPorPrestamos_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbAbonosPorPrestamos_Bitacora", "Nomi");

                entity.Property(e => e.abpr_Fecha).HasColumnType("datetime");

                entity.Property(e => e.abpr_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.abpr_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.abpr_MontoAbonado).HasColumnType("money");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tbActividades>(entity =>
            {
                entity.HasKey(e => e.acti_Id);

                entity.ToTable("tbActividades", "Proy");

                entity.Property(e => e.acti_Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.acti_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.acti_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.acti_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbActividadesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_tbActividades_tbUsuarios_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbActividadesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_tbActividades_tbUsuarios_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbActividadesPorEtapas>(entity =>
            {
                entity.HasKey(e => e.acet_Id)
                    .HasName("PK_tbActividadesPorEtapas_acet_Id");

                entity.ToTable("tbActividadesPorEtapas", "Proy");

                entity.Property(e => e.acet_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.acet_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.acet_FechaFin).HasColumnType("datetime");

                entity.Property(e => e.acet_FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.acet_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.acet_Observacion)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N/A')");

                entity.Property(e => e.acet_PrecioManoObraEstimado).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.acet_PrecioManoObraFinal).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.empl_Id).HasDefaultValueSql("((2))");

                entity.Property(e => e.espr_Id).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.acti)
                    .WithMany(p => p.tbActividadesPorEtapas)
                    .HasForeignKey(d => d.acti_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbActividadesPorEtapas)
                    .HasForeignKey(d => d.empl_Id)
                    .HasConstraintName("FK_Proy_tbActividadesPorEtapas_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.espr)
                    .WithMany(p => p.tbActividadesPorEtapas)
                    .HasForeignKey(d => d.espr_Id);

                entity.HasOne(d => d.etpr)
                    .WithMany(p => p.tbActividadesPorEtapas)
                    .HasForeignKey(d => d.etpr_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.unme)
                    .WithMany(p => p.tbActividadesPorEtapas)
                    .HasForeignKey(d => d.unme_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbActividadesPorEtapas_Gral_tbUnidadesMedida_unme_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbActividadesPorEtapasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbActividadesPorEtapas_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbActividadesPorEtapasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbActividadesPorEtapas_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbAgentesBienesRaices>(entity =>
            {
                entity.HasKey(e => e.agen_Id);

                entity.ToTable("tbAgentesBienesRaices", "Raiz");

                entity.HasIndex(e => e.agen_DNI, "UQ_agen_DNI")
                    .IsUnique();

                entity.HasIndex(e => e.agen_DNI, "UQ_tbAgentesBienesRaices_agen_DNI")
                    .IsUnique();

                entity.Property(e => e.agen_Apellido)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.agen_Correo).IsRequired();

                entity.Property(e => e.agen_DNI)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.agen_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.agen_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.agen_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.agen_Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.agen_Telefono)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.HasOne(d => d.embr)
                    .WithMany(p => p.tbAgentesBienesRaices)
                    .HasForeignKey(d => d.embr_Id)
                    .HasConstraintName("FK_tbAgentesBienesRaices_tbEmpresaBienesRaices_embr_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbAgentesBienesRaicesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Raiz_tbAgentesBienesRaices_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbAgentesBienesRaicesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Raiz_tbAgentesBienesRaices_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbAlertas>(entity =>
            {
                entity.HasKey(e => e.aler_Id);

                entity.ToTable("tbAlertas", "Proy");

                entity.Property(e => e.aler_Descripcion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.aler_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.aler_Fecha).HasColumnType("date");

                entity.Property(e => e.aler_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.aler_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.aler_Ruta)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbAlertasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Proy_tbAlertas_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbAlertasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbAlertas_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbBancos>(entity =>
            {
                entity.HasKey(e => e.banc_Id)
                    .HasName("PK__tbBancos__2E89FE2C047ED203");

                entity.ToTable("tbBancos", "Gral");

                entity.HasIndex(e => e.banc_Descripcion, "UQ_tbBancos_Descripcion")
                    .IsUnique();

                entity.Property(e => e.banc_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.banc_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.banc_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.banc_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbBancosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gral_tbBancos_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbBancosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbBancos_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbBienesRaices>(entity =>
            {
                entity.HasKey(e => e.bien_Id)
                    .HasName("PK_tbBienesRaices_bien_Id");

                entity.ToTable("tbBienesRaices", "Raiz");

                entity.Property(e => e.bien_Desripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.bien_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.bien_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.bien_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.bien_Imagen).IsUnicode(false);

                entity.Property(e => e.bien_Precio).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.pcon)
                    .WithMany(p => p.tbBienesRaices)
                    .HasForeignKey(d => d.pcon_Id)
                    .HasConstraintName("FK_Raiz_tbBienesRaices_pcon_Id_Proy_tbProyectosConstruccionBienesRaices_pcon_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbBienesRaicesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Raiz_tbBienesRaices_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbBienesRaicesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Raiz_tbBienesRaices_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbBitacoraInsumos>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbBitacoraInsumos", "Insu");

                entity.Property(e => e.bita_Accion)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.bita_FechaAccion).HasColumnType("datetime");

                entity.Property(e => e.inpp_Observacion).IsUnicode(false);

                entity.Property(e => e.unme_Id)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tbBitacoraTasasCambio>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbBitacoraTasasCambio", "Gral");

                entity.Property(e => e.bita_Accion)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.bita_FechaAccion).HasColumnType("datetime");

                entity.Property(e => e.taca_ValorA).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.taca_ValorB).HasColumnType("numeric(8, 2)");
            });

            modelBuilder.Entity<tbBodegas>(entity =>
            {
                entity.HasKey(e => e.bode_Id);

                entity.ToTable("tbBodegas", "Insu");

                entity.HasIndex(e => e.bode_Descripcion, "UQ_bode_Descripcion")
                    .IsUnique();

                entity.Property(e => e.bode_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.bode_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.bode_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.bode_FechaModificiacion).HasColumnType("datetime");

                entity.Property(e => e.bode_Latitud).IsUnicode(false);

                entity.Property(e => e.bode_LinkUbicacion).IsUnicode(false);

                entity.Property(e => e.bode_Longitud).IsUnicode(false);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbBodegasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbBodegas_usua_Creacion_Acce_tbUsuarios_usua_Id\n");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbBodegasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbBodegas_usua_Modificacion_Acce_tbUsuarios_usua_Id\n");
            });

            modelBuilder.Entity<tbBodegasPorInsumo>(entity =>
            {
                entity.HasKey(e => e.bopi_Id)
                    .HasName("PK_BodegaPorInsumo");

                entity.ToTable("tbBodegasPorInsumo", "Insu");

                entity.Property(e => e.bopi_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.bopi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.bopi_Precio).HasColumnType("numeric(8, 2)");

                entity.HasOne(d => d.bode)
                    .WithMany(p => p.tbBodegasPorInsumo)
                    .HasForeignKey(d => d.bode_Id);

                entity.HasOne(d => d.inpp)
                    .WithMany(p => p.tbBodegasPorInsumo)
                    .HasForeignKey(d => d.inpp_Id);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbBodegasPorInsumousua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Insu_tbBodegasPorInsumo_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbBodegasPorInsumousua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbBodegasPorInsumo_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbCargos>(entity =>
            {
                entity.HasKey(e => e.carg_Id)
                    .HasName("PK_Cargo");

                entity.ToTable("tbCargos", "Gral");

                entity.HasIndex(e => e.carg_Descripcion, "UQ_carg_Descripcion")
                    .IsUnique();

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.carg_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.carg_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbCargosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gral_tbCargos_usua_Creacion_Acce_tbUsuarios_usua_Id\n");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbCargosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbCargos_usua_Modificacion_Acce_tbUsuarios_usua_Id\n");
            });

            modelBuilder.Entity<tbCategorias>(entity =>
            {
                entity.HasKey(e => e.cate_Id);

                entity.ToTable("tbCategorias", "Insu");

                entity.Property(e => e.cate_Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.cate_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.cate_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.cate_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbCategoriasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbCategorias_tbUsuarios_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbCategoriasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_tbCategorias_tbUsuarios_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbCategoriasViaticos>(entity =>
            {
                entity.HasKey(e => e.cavi_Id);

                entity.ToTable("tbCategoriasViaticos", "Nomi");

                entity.Property(e => e.cavi_Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.cavi_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.cavi_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbCategoriasViaticosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbCategoriasViaticos_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbCategoriasViaticosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Nomi_tbCategoriasViaticos_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbCategoriasViaticos_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbCategoriasViaticos_Bitacora", "Nomi");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.cavi_Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.cavi_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.cavi_FechaModificacion).HasColumnType("datetime");
            });

            modelBuilder.Entity<tbCiudades>(entity =>
            {
                entity.HasKey(e => e.ciud_Id)
                    .HasName("PK_Ciudades");

                entity.ToTable("tbCiudades", "Gral");

                entity.HasIndex(e => new { e.ciud_Codigo, e.esta_Id }, "UQ_tbCiudades_ciud_Codigo_esta_Id")
                    .IsUnique();

                entity.Property(e => e.ciud_Codigo)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ciud_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ciud_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.ciud_FechaModificiacion).HasColumnType("datetime");

                entity.HasOne(d => d.esta)
                    .WithMany(p => p.tbCiudades)
                    .HasForeignKey(d => d.esta_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbCiudadesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gral_tbCiudades_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbCiudadesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbCiudades_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbClientes>(entity =>
            {
                entity.HasKey(e => e.clie_Id)
                    .HasName("PK_tbClientes_clie_Id");

                entity.ToTable("tbClientes", "Gral");

                entity.HasIndex(e => e.clie_CorreoElectronico, "UQ_tbclientes_clie_CorreoElectronico")
                    .IsUnique();

                entity.HasIndex(e => e.clie_DNI, "UQ_tbclientes_clie_DNI")
                    .IsUnique();

                entity.Property(e => e.clie_Apellido)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.clie_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.clie_DNI)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.clie_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clie_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.clie_Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Telefono)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.ciud)
                    .WithMany(p => p.tbClientes)
                    .HasForeignKey(d => d.ciud_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.civi)
                    .WithMany(p => p.tbClientes)
                    .HasForeignKey(d => d.civi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbClientesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Gral_tbClientes_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbClientesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbClientes_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbComprasDetalle>(entity =>
            {
                entity.HasKey(e => e.codt_Id)
                    .HasName("PK_Insu_tbComprasDetalle_codt_Id");

                entity.ToTable("tbComprasDetalle", "Insu");

                entity.Property(e => e.codt_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.codt_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.codt_preciocompra).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.code)
                    .WithMany(p => p.tbComprasDetalle)
                    .HasForeignKey(d => d.code_Id)
                    .HasConstraintName("FK_Insu_tbComprasDetalle_tbCotizacionesDetalle_code_Id");

                entity.HasOne(d => d.coen)
                    .WithMany(p => p.tbComprasDetalle)
                    .HasForeignKey(d => d.coen_Id)
                    .HasConstraintName("FK_Insu_tbComprasDetalle_tbComprasEncabezado_coen_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbComprasDetalleusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Insu_tbComprasDetalle_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbComprasDetalleusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbComprasDetalle_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbComprasDetallesDirecciones>(entity =>
            {
                entity.HasKey(e => e.codd_Id)
                    .HasName("PK_Insu_tbCompra_codd_Id");

                entity.ToTable("tbComprasDetallesDirecciones", "Insu");

                entity.Property(e => e.codd_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.codd_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.codt)
                    .WithMany(p => p.tbComprasDetallesDirecciones)
                    .HasForeignKey(d => d.codt_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbComprasDetallesDireccionesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbComprasDetallesDirecciones_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbComprasDetallesDireccionesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbComprasDetallesDirecciones_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbComprasDetallesDireccionesPorMaquinaria>(entity =>
            {
                entity.HasKey(e => e.codm_Id)
                    .HasName("PK_Insu_tbCompra_codm_Id");

                entity.ToTable("tbComprasDetallesDireccionesPorMaquinaria", "Insu");

                entity.Property(e => e.codm_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.codm_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.codm_HorasRenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.acet)
                    .WithMany(p => p.tbComprasDetallesDireccionesPorMaquinaria)
                    .HasForeignKey(d => d.acet_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbComprasDetallesDireccionesPorMaquinaria_Proy_tbActividadesPorEtapas_acet_Id");

                entity.HasOne(d => d.codt)
                    .WithMany(p => p.tbComprasDetallesDireccionesPorMaquinaria)
                    .HasForeignKey(d => d.codt_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbComprasDetallesDireccionesPorMaquinariausua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbComprasDetallesDireccionesPorMaquinaria_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModficacionNavigation)
                    .WithMany(p => p.tbComprasDetallesDireccionesPorMaquinariausua_ModficacionNavigation)
                    .HasForeignKey(d => d.usua_Modficacion)
                    .HasConstraintName("FK_Insu_tbComprasDetallesDireccionesPorMaquinaria_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbComprasEncabezado>(entity =>
            {
                entity.HasKey(e => e.coen_Id)
                    .HasName("PK_Insu_tbCompraEncabezado_coen_Id");

                entity.ToTable("tbComprasEncabezado", "Insu");

                entity.Property(e => e.coen_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.coen_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.coen_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.coen_numeroCompra)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbComprasEncabezado)
                    .HasForeignKey(d => d.empl_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbComprasEncabezado_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.meto)
                    .WithMany(p => p.tbComprasEncabezado)
                    .HasForeignKey(d => d.meto_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbComprasEncabezado_Gral_tbMetodosPago_meto_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbComprasEncabezadousua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbComprasEncabezado_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbComprasEncabezadousua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbComprasEncabezado_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbControlDeCalidadesPorActividades>(entity =>
            {
                entity.HasKey(e => e.coca_Id)
                    .HasName("PK_bControlCalidad");

                entity.ToTable("tbControlDeCalidadesPorActividades", "Proy");

                entity.Property(e => e.coca_Aprobado).HasDefaultValueSql("((0))");

                entity.Property(e => e.coca_CantidadTrabajada).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.coca_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.coca_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.coca_Fecha).HasColumnType("datetime");

                entity.Property(e => e.coca_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.coca_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.acet)
                    .WithMany(p => p.tbControlDeCalidadesPorActividades)
                    .HasForeignKey(d => d.acet_Id)
                    .HasConstraintName("FK_tbControlDeCalidades_tbActividadesPorEtapas_acet_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbControlDeCalidadesPorActividadesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbControlCalidad_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbControlDeCalidadesPorActividadesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbControlCalidad_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbCostoPorActividad>(entity =>
            {
                entity.HasKey(e => e.copc_Id)
                    .HasName("PK__tbCostoP__7CCB332F61591203");

                entity.ToTable("tbCostoPorActividad", "Nomi");

                entity.Property(e => e.copc_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.copc_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.acti)
                    .WithMany(p => p.tbCostoPorActividad)
                    .HasForeignKey(d => d.acti_Id)
                    .HasConstraintName("FK_Nomi_tbCostoPorActividad_Proy_tbActividades_acti_Id");

                entity.HasOne(d => d.unme)
                    .WithMany(p => p.tbCostoPorActividad)
                    .HasForeignKey(d => d.unme_Id)
                    .HasConstraintName("FK_Nomi_tbCostoPorActividad_Gral_tbUnidadesMedida_unme_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbCostoPorActividadusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Nomi_tbCostoPorActividad_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbCostoPorActividadusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Nomi_tbCostoPorActividad_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbCostoPorActividad_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbCostoPorActividad_Bitacora", "Nomi");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.copc_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.copc_FechaModificacion).HasColumnType("datetime");
            });

            modelBuilder.Entity<tbCotizaciones>(entity =>
            {
                entity.HasKey(e => e.coti_Id)
                    .HasName("PK_CotizacionesPorProyecto");

                entity.ToTable("tbCotizaciones", "Insu");

                entity.Property(e => e.coti_Documento).IsUnicode(false);

                entity.Property(e => e.coti_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.coti_Fecha).HasColumnType("datetime");

                entity.Property(e => e.coti_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.coti_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.coti_Impuesto).HasColumnType("decimal(12, 2)");

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbCotizaciones)
                    .HasForeignKey(d => d.empl_Id)
                    .HasConstraintName("FK_Insu_tbCotizaciones_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.prov)
                    .WithMany(p => p.tbCotizaciones)
                    .HasForeignKey(d => d.prov_Id);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbCotizacionesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Insu_tbCotizaciones_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbCotizacionesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbCotizaciones_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbCotizacionesDetalle>(entity =>
            {
                entity.HasKey(e => e.code_Id)
                    .HasName("PK_tbCotizacionesDetalles");

                entity.ToTable("tbCotizacionesDetalle", "Insu");

                entity.Property(e => e.code_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.code_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.code_PrecioCompra).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.coti)
                    .WithMany(p => p.tbCotizacionesDetalle)
                    .HasForeignKey(d => d.coti_Id)
                    .HasConstraintName("FK_tbCotizacionesDetalles_tbCotizaciones_coti_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbCotizacionesDetalleusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Insu_tbCotizacionesDetalles_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbCotizacionesDetalleusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("Fk_Insu_tbCotizacionesDetalles_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbCotizacionesPorDocumentos>(entity =>
            {
                entity.HasKey(e => e.copd_Id)
                    .HasName("PK__tbCotiza__74E6C33304583967");

                entity.ToTable("tbCotizacionesPorDocumentos", "Insu");

                entity.Property(e => e.copd_Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.copd_Documento)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.copd_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.copd_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.coti)
                    .WithMany(p => p.tbCotizacionesPorDocumentos)
                    .HasForeignKey(d => d.coti_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbCotizacionesPorDocumentosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbCotizacionesPorDocumentos_usua_Creacion_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbCotizacionesPorDocumentosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_tbCotizacionesPorDocumentos_usua_Modificacion_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDeducciones>(entity =>
            {
                entity.HasKey(e => e.dedu_Id);

                entity.ToTable("tbDeducciones", "Nomi");

                entity.Property(e => e.dedu_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.dedu_EsMontoFijo).HasDefaultValueSql("((0))");

                entity.Property(e => e.dedu_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.dedu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.dedu_Porcentaje).HasColumnType("numeric(8, 2)");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbDeduccionesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbDeducciones_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbDeduccionesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Nomi_tbDeducciones_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDeduccionesPorEmpleados>(entity =>
            {
                entity.HasKey(e => e.deem_Id);

                entity.ToTable("tbDeduccionesPorEmpleados", "Nomi");

                entity.Property(e => e.deem_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.deem_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.deem_Porcentaje).HasColumnType("numeric(8, 2)");

                entity.HasOne(d => d.dedu)
                    .WithMany(p => p.tbDeduccionesPorEmpleados)
                    .HasForeignKey(d => d.dedu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbDeduccionesPorEmpleados)
                    .HasForeignKey(d => d.empl_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbDeduccionesPorEmpleados_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbDeduccionesPorEmpleadosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbDeduccionesPorEmpleados_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbDeduccionesPorEmpleadosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Nomi_tbDeduccionesPorEmpleados_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDeduccionesPorEmpleados_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbDeduccionesPorEmpleados_Bitacora", "Nomi");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.deem_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.deem_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.deem_Porcentaje).HasColumnType("numeric(8, 2)");
            });

            modelBuilder.Entity<tbDeduccionesPorPlanilla>(entity =>
            {
                entity.HasKey(e => e.depl_Id);

                entity.ToTable("tbDeduccionesPorPlanilla", "Nomi");

                entity.Property(e => e.dedu_Porcentaje).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.depl_Estado).HasDefaultValueSql("((0))");

                entity.Property(e => e.depl_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.depl_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.dedu)
                    .WithMany(p => p.tbDeduccionesPorPlanilla)
                    .HasForeignKey(d => d.dedu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.plde)
                    .WithMany(p => p.tbDeduccionesPorPlanilla)
                    .HasForeignKey(d => d.plde_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbDeduccionesPorPlanillausua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbDeduccionesPorPlanilla_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbDeduccionesPorPlanillausua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Nomi_tbDeduccionesPorPlanilla_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDeduccionesPorPlanilla_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbDeduccionesPorPlanilla_Bitacora", "Nomi");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.dedu_Porcentaje).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.depl_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.depl_FechaModificacion).HasColumnType("datetime");
            });

            modelBuilder.Entity<tbDeducciones_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbDeducciones_Bitacora", "Nomi");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.dedu_Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.dedu_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.dedu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.dedu_Porcentaje).HasColumnType("numeric(8, 2)");
            });

            modelBuilder.Entity<tbDocumentos>(entity =>
            {
                entity.HasKey(e => e.docu_Id)
                    .HasName("PK_tbDocumentos_docu_Id");

                entity.ToTable("tbDocumentos", "Proy");

                entity.Property(e => e.docu_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.docu_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.docu_Fecha).HasColumnType("datetime");

                entity.Property(e => e.docu_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.docu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.docu_Ruta).IsRequired();

                entity.Property(e => e.docu_Tipo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbDocumentos)
                    .HasForeignKey(d => d.empl_Id)
                    .HasConstraintName("FK_Proy_tbDocumentos_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.proy)
                    .WithMany(p => p.tbDocumentos)
                    .HasForeignKey(d => d.proy_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbDocumentosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbDocumentos_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbDocumentosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbDocumentos_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDocumentosBienRaiz>(entity =>
            {
                entity.HasKey(e => e.dobt_Id)
                    .HasName("PK_DocumentosBienesRaices_dobt_Id");

                entity.ToTable("tbDocumentosBienRaiz", "Raiz");

                entity.Property(e => e.dobt_DescipcionDocumento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.dobt_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.dobt_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.dobt_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.dobt_Imagen).IsUnicode(false);

                entity.HasOne(d => d.tido)
                    .WithMany(p => p.tbDocumentosBienRaiz)
                    .HasForeignKey(d => d.tido_Id)
                    .HasConstraintName("FK_tbDocumentosBienRaiz_tido_Id_tbTipoDocumento_tido_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbDocumentosBienRaizusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Raiz_tbDocumentosBienesRaices_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbDocumentosBienRaizusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Raiz_tbDocumentosBienesRaices_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEmpleados>(entity =>
            {
                entity.HasKey(e => e.empl_Id);

                entity.ToTable("tbEmpleados", "Gral");

                entity.HasIndex(e => e.empl_CorreoElectronico, "UQ_tbEmpleados_empl_CorreoElectronico")
                    .IsUnique();

                entity.HasIndex(e => e.empl_CorreoElectronico, "UQ_tbEmpleados_empl_Dni")
                    .IsUnique();

                entity.Property(e => e.empl_Apellido)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.empl_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.empl_DNI)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.empl_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.empl_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empl_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empl_NoBancario)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.empl_ObservacionActivar).IsUnicode(false);

                entity.Property(e => e.empl_ObservacionInactivar).IsUnicode(false);

                entity.Property(e => e.empl_OtrasRemuneraciones).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.empl_Prestaciones).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.empl_Salario).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.empl_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Telefono)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.banc)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.banc_Id);

                entity.HasOne(d => d.carg)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.carg_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ciud)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.ciud_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.civi)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.civi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.frec)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.frec_Id)
                    .HasConstraintName("FK_Gral_tbEmpleados_Nomi_tbFrecuencias_frec_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbEmpleados_usua_Creacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEmpleados_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbEmpleados_Bitacora", "Gral");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Apellido)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.empl_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.empl_DNI)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.empl_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.empl_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empl_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empl_Imagen).IsUnicode(false);

                entity.Property(e => e.empl_NoBancario)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.empl_ObservacionActivar).IsUnicode(false);

                entity.Property(e => e.empl_ObservacionInactivar).IsUnicode(false);

                entity.Property(e => e.empl_OtrasRemuneraciones).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.empl_Prestaciones).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.empl_Salario).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.empl_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Telefono)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tbEmpresasBienesRaices>(entity =>
            {
                entity.HasKey(e => e.embr_Id)
                    .HasName("PK_tbEmpresasBienesRaices_embr_Id");

                entity.ToTable("tbEmpresasBienesRaices", "Raiz");

                entity.HasIndex(e => e.embr_Nombre, "UC_Embr_Nombre")
                    .IsUnique();

                entity.Property(e => e.embr_ContactoA)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.embr_ContactoB)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.embr_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.embr_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.embr_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.embr_Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.embr_TelefonoA)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.embr_TelefonoB)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbEmpresasBienesRaicesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Raiz_tbEmpresasBienesRaices_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbEmpresasBienesRaicesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Raiz_tbEmpresasBienesRaices_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEquiposSeguridad>(entity =>
            {
                entity.HasKey(e => e.equs_Id);

                entity.ToTable("tbEquiposSeguridad", "Insu");

                entity.Property(e => e.equs_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.equs_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.equs_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.equs_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.equs_Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.equs_UltimoPrecio)
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbEquiposSeguridadusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Insu_tbEquiposSeguridad_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbEquiposSeguridadusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbEquiposSeguridad_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEquiposSeguridadPorActividades>(entity =>
            {
                entity.HasKey(e => e.eqac_Id)
                    .HasName("PK_tbEquiposSeguridadPorActividades_eqac_Id");

                entity.ToTable("tbEquiposSeguridadPorActividades", "Proy");

                entity.HasIndex(e => new { e.eqpp_Id, e.eqac_Costo, e.acet_Id, e.eqac_Estado }, "UQ_tbEquiposSeguridadPorActividades_eqpp_Id_eqac_Costo_acet_Id_eqac_Estado")
                    .IsUnique();

                entity.Property(e => e.eqac_Costo).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.eqac_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.eqac_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.eqac_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.acet)
                    .WithMany(p => p.tbEquiposSeguridadPorActividades)
                    .HasForeignKey(d => d.acet_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.eqpp)
                    .WithMany(p => p.tbEquiposSeguridadPorActividades)
                    .HasForeignKey(d => d.eqpp_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbEquiposSeguridadPorActividades_Insu_tbEquiposSeguridadPorProveedores_eqpp_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbEquiposSeguridadPorActividadesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbEquiposSeguridadPorActividades_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbEquiposSeguridadPorActividadesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbEquiposSeguridadPorActividades_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEquiposSeguridadPorBodegas>(entity =>
            {
                entity.HasKey(e => e.eqbo_Id)
                    .HasName("PK_tbequiposSeguridadPorBodegas");

                entity.ToTable("tbEquiposSeguridadPorBodegas", "Insu");

                entity.Property(e => e.eqbo_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.eqbo_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.eqbo_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.eqbo_PrecioCompra).HasColumnType("numeric(12, 2)");

                entity.HasOne(d => d.bode)
                    .WithMany(p => p.tbEquiposSeguridadPorBodegas)
                    .HasForeignKey(d => d.bode_Id);

                entity.HasOne(d => d.eqpp)
                    .WithMany(p => p.tbEquiposSeguridadPorBodegas)
                    .HasForeignKey(d => d.eqpp_Id)
                    .HasConstraintName("FK_tbEquiposSeguridadPorProveedores_tbBodegas_eqpp_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbEquiposSeguridadPorBodegasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Insu_tbEquiposSeguridadPorBodegas_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbEquiposSeguridadPorBodegasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbEquiposSeguridadPorBodegas_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEquiposSeguridadPorProveedores>(entity =>
            {
                entity.HasKey(e => e.eqpp_Id);

                entity.ToTable("tbEquiposSeguridadPorProveedores", "Insu");

                entity.Property(e => e.eqpp_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.eqpp_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.eqpp_PrecioCompra).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.equs)
                    .WithMany(p => p.tbEquiposSeguridadPorProveedores)
                    .HasForeignKey(d => d.equs_Id);

                entity.HasOne(d => d.prov)
                    .WithMany(p => p.tbEquiposSeguridadPorProveedores)
                    .HasForeignKey(d => d.prov_Id);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbEquiposSeguridadPorProveedoresusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbEquiposSeguridadPorProveedores_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbEquiposSeguridadPorProveedoresusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbEquiposSeguridadPorProveedores_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEstados>(entity =>
            {
                entity.HasKey(e => e.esta_Id)
                    .HasName("PK_tbEstados_esta_Id");

                entity.ToTable("tbEstados", "Gral");

                entity.HasIndex(e => new { e.esta_Codigo, e.pais_Id }, "UQ_esta_Codigo_pais_Id")
                    .IsUnique();

                entity.HasIndex(e => e.esta_Codigo, "UQ_tbEstados_esta_Codigo")
                    .IsUnique();

                entity.Property(e => e.esta_Codigo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.esta_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.esta_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.esta_Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.pais)
                    .WithMany(p => p.tbEstados)
                    .HasForeignKey(d => d.pais_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbEstadosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Gral_tbEstados_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbEstadosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbEstados_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEstadosCiviles>(entity =>
            {
                entity.HasKey(e => e.civi_Id)
                    .HasName("PK_Gral_tbEstadosCiviles_civi_Id");

                entity.ToTable("tbEstadosCiviles", "Gral");

                entity.HasIndex(e => e.civi_Descripcion, "UQ_tbEstadosCiviles_civi_Descripcion")
                    .IsUnique();

                entity.Property(e => e.civi_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.civi_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.civi_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.civi_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbEstadosCivilesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Gral_tbEstadosCiviles_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbEstadosCivilesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbEstadosCiviles_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEstadosProyectos>(entity =>
            {
                entity.HasKey(e => e.espr_Id);

                entity.ToTable("tbEstadosProyectos", "Proy");

                entity.HasIndex(e => e.espr_Descripcion, "UQ_espr_Descripcion")
                    .IsUnique();

                entity.Property(e => e.espr_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.espr_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.espr_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.espr_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbEstadosProyectosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Proy_tbEstadosProyectos_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbEstadosProyectosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbEstadosProyectos_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEtapas>(entity =>
            {
                entity.HasKey(e => e.etap_Id)
                    .HasName("PK_tbEtapas_etap_Id");

                entity.ToTable("tbEtapas", "Proy");

                entity.Property(e => e.etap_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.etap_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.etap_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.etap_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbEtapasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Proy_tbEtapas_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbEtapasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbEtapas_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEtapasPorProyectos>(entity =>
            {
                entity.HasKey(e => e.etpr_Id)
                    .HasName("PK_tbEtapasPorProyectos_etpr_Id");

                entity.ToTable("tbEtapasPorProyectos", "Proy");

                entity.Property(e => e.empl_Id).HasDefaultValueSql("((2))");

                entity.Property(e => e.etpr_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.etpr_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.etpr_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbEtapasPorProyectos)
                    .HasForeignKey(d => d.empl_Id)
                    .HasConstraintName("FK_Proy_tbEtapasPorProyectos_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.etap)
                    .WithMany(p => p.tbEtapasPorProyectos)
                    .HasForeignKey(d => d.etap_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.proy)
                    .WithMany(p => p.tbEtapasPorProyectos)
                    .HasForeignKey(d => d.proy_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbEtapasPorProyectosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbEtapasPorProyectos_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbEtapasPorProyectosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbEtapasPorProyectos_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbFletesControlCalidad>(entity =>
            {
                entity.HasKey(e => e.flcc_Id);

                entity.ToTable("tbFletesControlCalidad", "Flet");

                entity.Property(e => e.flcc_DescripcionIncidencia)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.flcc_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.flcc_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.flcc_FechaHoraIncidencia).HasColumnType("datetime");

                entity.Property(e => e.flcc_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.flen)
                    .WithMany(p => p.tbFletesControlCalidad)
                    .HasForeignKey(d => d.flen_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbFletesControlCalidadusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Flet_tbFletesControlCalidad_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbFletesControlCalidadusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("Fk_Flet_tbFletesControlCalidad_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbFletesDetalle>(entity =>
            {
                entity.HasKey(e => e.flde_Id)
                    .HasName("PK_tbFelesDetalle");

                entity.ToTable("tbFletesDetalle", "Flet");

                entity.Property(e => e.flde_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.flde_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.flen)
                    .WithMany(p => p.tbFletesDetalle)
                    .HasForeignKey(d => d.flen_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbFletesDetalleusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Flet_tbFletesDetalle_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbFletesDetalleusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("Fk_Flet_tbFletesDetalle_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbFletesEncabezado>(entity =>
            {
                entity.HasKey(e => e.flen_Id);

                entity.ToTable("tbFletesEncabezado", "Flet");

                entity.Property(e => e.flen_ComprobanteLLegada).IsUnicode(false);

                entity.Property(e => e.flen_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.flen_FechaHoraEstablecidaDeLlegada).HasColumnType("datetime");

                entity.Property(e => e.flen_FechaHoraLlegada).HasColumnType("datetime");

                entity.Property(e => e.flen_FechaHoraSalida).HasColumnType("datetime");

                entity.Property(e => e.flen_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbFletesEncabezadousua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Flet_tbFletesEncabezado_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbFletesEncabezadousua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("Fk_Flet_tbFletesEncabezado_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbFrecuencias>(entity =>
            {
                entity.HasKey(e => e.frec_Id)
                    .HasName("PK_tbFrecuencia");

                entity.ToTable("tbFrecuencias", "Nomi");

                entity.Property(e => e.frec_Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.frec_Estado).HasDefaultValueSql("((0))");

                entity.Property(e => e.frec_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.frec_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.frec_NumeroDias)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbFrecuenciasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbFrecuencia_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbFrecuenciasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Nomi_tbFrecuencia_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbFrecuencias_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbFrecuencias_Bitacora", "Nomi");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.frec_Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.frec_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.frec_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.frec_NumeroDias)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tbGestionRiesgos>(entity =>
            {
                entity.HasKey(e => e.geri_Id)
                    .HasName("PK_tbGestionRiesgos_geri_Id");

                entity.ToTable("tbGestionRiesgos", "Proy");

                entity.HasIndex(e => new { e.geri_Descripcion, e.proy_Id }, "UQ_tbGestionRiesgos_geri_Descripcion_proy_Id")
                    .IsUnique();

                entity.Property(e => e.geri_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.geri_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.geri_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.geri_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.geri_Impacto)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.geri_Mitigacion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.geri_Probabilidad).HasColumnType("numeric(5, 2)");

                entity.HasOne(d => d.proy)
                    .WithMany(p => p.tbGestionRiesgos)
                    .HasForeignKey(d => d.proy_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbGestionRiesgosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbGestionRiesgos_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbGestionRiesgosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbGestionRiesgos_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbGestionesAdicionales>(entity =>
            {
                entity.HasKey(e => e.adic_Id)
                    .HasName("PK_tbGestionAdicionales_adic_Id");

                entity.ToTable("tbGestionesAdicionales", "Proy");

                entity.Property(e => e.adic_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.adic_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.adic_Fecha).HasColumnType("datetime");

                entity.Property(e => e.adic_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.adic_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.adic_PresupuestoAdicional).HasColumnType("decimal(10, 2)");

                entity.HasOne(d => d.acet)
                    .WithMany(p => p.tbGestionesAdicionales)
                    .HasForeignKey(d => d.acet_Id)
                    .HasConstraintName("FK_tbGestionesAdicionales_tbActividadesPorEtapa_acet_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbGestionesAdicionalesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbGestionAdicionales_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbGestionesAdicionalesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbGestionAdicionales_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbImagenesPorControlesDeCalidades>(entity =>
            {
                entity.HasKey(e => e.icca_Id)
                    .HasName("PK_tbImagenesPorControlCalidad");

                entity.ToTable("tbImagenesPorControlesDeCalidades", "Proy");

                entity.Property(e => e.icca_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.icca_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.icca_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.icca_Imagen)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.coca)
                    .WithMany(p => p.tbImagenesPorControlesDeCalidades)
                    .HasForeignKey(d => d.coca_Id)
                    .HasConstraintName("Fk_tbImagenesPorControlesDeCalidad_tbControlDeCalidadesPorActividades_coca_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbImagenesPorControlesDeCalidadesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbImagenesPorControlCalidad_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbImagenesPorControlesDeCalidadesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbImagenesPorControlCalidad_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbImagenesPorGestionesAdicionales>(entity =>
            {
                entity.HasKey(e => e.Imge_Id)
                    .HasName("PK_tbImagenesPorGestionesAdicionales_imge_Id");

                entity.ToTable("tbImagenesPorGestionesAdicionales", "Proy");

                entity.Property(e => e.Imge_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.Imge_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.Imge_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Imge_Imagen).IsUnicode(false);

                entity.HasOne(d => d.adic)
                    .WithMany(p => p.tbImagenesPorGestionesAdicionales)
                    .HasForeignKey(d => d.adic_Id);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbImagenesPorGestionesAdicionalesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbImagenesPorGestionesAdicionales_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbImagenesPorGestionesAdicionalesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbImagenesPorGestionesAdicionales_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbImagenesPorIncidencias>(entity =>
            {
                entity.HasKey(e => e.imin_Id)
                    .HasName("PK_tbImagenesPorIncidencias_imin_Id");

                entity.ToTable("tbImagenesPorIncidencias", "Proy");

                entity.Property(e => e.imin_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.imin_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.imin_Imagen)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.inci)
                    .WithMany(p => p.tbImagenesPorIncidencias)
                    .HasForeignKey(d => d.inci_Id)
                    .HasConstraintName("FK_tbImagenesPorIncidencia_tbIncidentes_inci_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbImagenesPorIncidenciasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Proy_tbImagenesPorIncidencias_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbImagenesPorIncidenciasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbImagenesPorIncidencias_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbImagenesPorProcesosVentas>(entity =>
            {
                entity.HasKey(e => e.impr_Id)
                    .HasName("PK__tbImagen__796A3501213CFE8B");

                entity.ToTable("tbImagenesPorProcesosVentas", "Raiz");

                entity.Property(e => e.impr_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.impr_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.impr_Imagen).IsUnicode(false);

                entity.HasOne(d => d.btrp)
                    .WithMany(p => p.tbImagenesPorProcesosVentas)
                    .HasForeignKey(d => d.btrp_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbImagenesPorProcesosVentasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Raiz_tbImagenesPorProcesosVentas_usua_Creacion_ Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbImagenesPorProcesosVentasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Raiz_tbImagenesPorProcesosVentas_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbImpuestos>(entity =>
            {
                entity.HasKey(e => e.impu_Id)
                    .HasName("PK__tbImpues_Impu_Id");

                entity.ToTable("tbImpuestos", "Gral");

                entity.Property(e => e.impu_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.impu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.impu_Porcentaje).HasColumnType("numeric(8, 2)");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbImpuestosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Gral_tbImpuestos_Usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbImpuestosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbImpuestos_Usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbImpuestos_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbImpuestos_Bitacora", "Gral");

                entity.Property(e => e.Acciones)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.imp_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.impu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.impu_Porcentaje).HasColumnType("numeric(8, 2)");
            });

            modelBuilder.Entity<tbIncidenciasPorActividades>(entity =>
            {
                entity.HasKey(e => e.inac_Id)
                    .HasName("PK__tbIncidenciasPorActividades_inac_Id");

                entity.ToTable("tbIncidenciasPorActividades", "Proy");

                entity.Property(e => e.inac_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.inac_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.acet)
                    .WithMany(p => p.tbIncidenciasPorActividades)
                    .HasForeignKey(d => d.acet_Id);

                entity.HasOne(d => d.inci)
                    .WithMany(p => p.tbIncidenciasPorActividades)
                    .HasForeignKey(d => d.inci_Id);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbIncidenciasPorActividadesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Proy_tbIncidenciasPorActividades_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbIncidenciasPorActividadesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbIncidenciasPorActividades_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbIncidenciasPorFletes>(entity =>
            {
                entity.HasKey(e => e.infl_Id);

                entity.ToTable("tbIncidenciasPorFletes", "Flet");

                entity.Property(e => e.infl_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.infl_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.flen)
                    .WithMany(p => p.tbIncidenciasPorFletes)
                    .HasForeignKey(d => d.flen_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbIncidenciasPorFletesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Flet_tbIncidenciasPorFletes_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbIncidenciasPorFletesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("Fk_Flet_tbIncidenciasPorFletes_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbIncidentes>(entity =>
            {
                entity.HasKey(e => e.inci_Id)
                    .HasName("PK_Incidentes_inci_Id");

                entity.ToTable("tbIncidentes", "Proy");

                entity.Property(e => e.inci_Costo).HasColumnType("money");

                entity.Property(e => e.inci_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.inci_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.inci_Fecha).HasColumnType("date");

                entity.Property(e => e.inci_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.inci_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.acet)
                    .WithMany(p => p.tbIncidentes)
                    .HasForeignKey(d => d.acet_Id);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbIncidentesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Proy_tbIncidentes_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbIncidentesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbIncidentes_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbInsumos>(entity =>
            {
                entity.HasKey(e => e.insu_Id);

                entity.ToTable("tbInsumos", "Insu");

                entity.HasIndex(e => e.insu_Descripcion, "UQ_insu_Descripcion")
                    .IsUnique();

                entity.Property(e => e.insu_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.insu_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.insu_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.insu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.insu_Observacion).IsUnicode(false);

                entity.Property(e => e.insu_UltimoPrecioUnitario).HasColumnType("decimal(10, 2)");

                entity.HasOne(d => d.mate)
                    .WithMany(p => p.tbInsumos)
                    .HasForeignKey(d => d.mate_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.suca)
                    .WithMany(p => p.tbInsumos)
                    .HasForeignKey(d => d.suca_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbInsumosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbInsumos_usua_Creacion_Acce_tbUsuarios_usua_Id\n");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbInsumosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbInsumos_tbUsuarios_usua_Modificacion_Acce_tbUsuarios_usua_Id\n");
            });

            modelBuilder.Entity<tbInsumosPorActividades>(entity =>
            {
                entity.HasKey(e => e.inpa_Id)
                    .HasName("PK_InsumoPorActividades_inpa_Id");

                entity.ToTable("tbInsumosPorActividades", "Proy");

                entity.HasIndex(e => new { e.inpp_Id, e.inpa_PrecioCompra, e.acet_Id, e.inpa_Estado }, "UQ_tbInsumosPorActividades_inpp_Id_inpa_PrecioCompra_acet_Id_inpa_Estado")
                    .IsUnique();

                entity.Property(e => e.inpa_ActividadLlenado).HasDefaultValueSql("((0))");

                entity.Property(e => e.inpa_Desperdicio).HasDefaultValueSql("((0))");

                entity.Property(e => e.inpa_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.inpa_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.inpa_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.inpa_FormulaRendimiento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N/A')");

                entity.Property(e => e.inpa_PrecioCompra).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.inpa_PrecioCompraFormula)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N/A')");

                entity.Property(e => e.inpa_Rendimiento)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.inpa_StockFormula)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N/A')");

                entity.HasOne(d => d.acet)
                    .WithMany(p => p.tbInsumosPorActividades)
                    .HasForeignKey(d => d.acet_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.inpp)
                    .WithMany(p => p.tbInsumosPorActividades)
                    .HasForeignKey(d => d.inpp_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbInsumosPorActividades_Insu_tbInsumosPorProveedores_inpp_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbInsumosPorActividadesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbInsumosPorActividades_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbInsumosPorActividadesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbInsumosPorActividades_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbInsumosPorMedidas>(entity =>
            {
                entity.HasKey(e => e.inpm_Id);

                entity.ToTable("tbInsumosPorMedidas", "Insu");

                entity.Property(e => e.inpm_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.inpm_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.insu)
                    .WithMany(p => p.tbInsumosPorMedidas)
                    .HasForeignKey(d => d.insu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.unme)
                    .WithMany(p => p.tbInsumosPorMedidas)
                    .HasForeignKey(d => d.unme_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbInsumosPorMedidasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbInsumosPorMedidas_usua_Creacion_Acce_tbUsuarios_usua_Id\n");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbInsumosPorMedidasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbInsumosPorMedidas_usua_Modificacion_Acce_tbUsuarios_usua_Id\n");
            });

            modelBuilder.Entity<tbInsumosPorProveedores>(entity =>
            {
                entity.HasKey(e => e.inpp_Id);

                entity.ToTable("tbInsumosPorProveedores", "Insu");

                entity.Property(e => e.inpp_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.inpp_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.inpp_Observacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.inpp_Preciocompra).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.insu)
                    .WithMany(p => p.tbInsumosPorProveedores)
                    .HasForeignKey(d => d.insu_Id);

                entity.HasOne(d => d.prov)
                    .WithMany(p => p.tbInsumosPorProveedores)
                    .HasForeignKey(d => d.prov_Id);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbInsumosPorProveedoresusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbInsumosPorProveedoress_tbUsuarios_usua_Creacion_Acce_tbUsuarios_usua_Id\n");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbInsumosPorProveedoresusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbInsumosPorProveedores_tbUsuarios_usua_Modificacion_Acce_tbUsuarios_usua_Id\n");
            });

            modelBuilder.Entity<tbMantenimientos>(entity =>
            {
                entity.HasKey(e => e.mant_Id)
                    .HasName("PK__tbManten__C4A585D83E20C959");

                entity.ToTable("tbMantenimientos", "Raiz");

                entity.Property(e => e.mant_DNI)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mant_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.mant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.mant_NombreCompleto)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.mant_Telefono).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbMantenimientosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbMantenimiento_tbUsuarios_Creacion");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbMantenimientosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_tbMantenimiento_tbUsuarios_Modificacion");
            });

            modelBuilder.Entity<tbMaquinarias>(entity =>
            {
                entity.HasKey(e => e.maqu_Id)
                    .HasName("PK_Maquinarias");

                entity.ToTable("tbMaquinarias", "Insu");

                entity.HasIndex(e => e.maqu_Descripcion, "UQ_maqu_Descripcion")
                    .IsUnique();

                entity.Property(e => e.maqu_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.maqu_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.maqu_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.maqu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.maqu_UltimoPrecioUnitario).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.nive)
                    .WithMany(p => p.tbMaquinarias)
                    .HasForeignKey(d => d.nive_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbMaquinarias_Gral_tbNivel_nive_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbMaquinariasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbMaquinarias_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbMaquinariasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbMaquinarias_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbMaquinariasPorProveedores>(entity =>
            {
                entity.HasKey(e => e.mapr_Id)
                    .HasName("PK_tbMaquinariaPorProveedores");

                entity.ToTable("tbMaquinariasPorProveedores", "Insu");

                entity.Property(e => e.mapr_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.mapr_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.mapr_PrecioCompra).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.maqu)
                    .WithMany(p => p.tbMaquinariasPorProveedores)
                    .HasForeignKey(d => d.maqu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbMaquinariaPorProveedores_tbMaquinarias_maqu_Id");

                entity.HasOne(d => d.prov)
                    .WithMany(p => p.tbMaquinariasPorProveedores)
                    .HasForeignKey(d => d.prov_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbMaquinariaPorProveedores_tbProveedores_prov_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbMaquinariasPorProveedoresusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbMaquinariasPorProveedores_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbMaquinariasPorProveedoresusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbMaquinariasPorProveedores_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbMateriales>(entity =>
            {
                entity.HasKey(e => e.mate_Id)
                    .HasName("PK_tbMateriales_mate_Id");

                entity.ToTable("tbMateriales", "Insu");

                entity.HasIndex(e => e.mate_Descripcion, "UQ_tbMateriales_mate_Descripcion")
                    .IsUnique();

                entity.Property(e => e.mate_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.mate_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.mate_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.mate_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbMaterialesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbMateriales_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbMaterialesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbMateriales_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbMetodosPago>(entity =>
            {
                entity.HasKey(e => e.meto_Id);

                entity.ToTable("tbMetodosPago", "Gral");

                entity.Property(e => e.meto_Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.meto_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.meto_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.meto_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.meto_UsuarioCreacionNavigation)
                    .WithMany(p => p.tbMetodosPagometo_UsuarioCreacionNavigation)
                    .HasForeignKey(d => d.meto_UsuarioCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbMetodosPago_meto_UsuarioCreacion_tbUsuarios_usua_Id");

                entity.HasOne(d => d.meto_UsuarioModificacionNavigation)
                    .WithMany(p => p.tbMetodosPagometo_UsuarioModificacionNavigation)
                    .HasForeignKey(d => d.meto_UsuarioModificacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbMetodosPago_meto_UsuarioModificacion_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbMonedas>(entity =>
            {
                entity.HasKey(e => e.mone_Id)
                    .HasName("PK_tbMonedas_mone_Id");

                entity.ToTable("tbMonedas", "Gral");

                entity.HasIndex(e => e.mone_Nombre, "UQ_tbMonedas_mone_Nombre")
                    .IsUnique();

                entity.Property(e => e.mone_Abreviatura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mone_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.mone_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.mone_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.mone_Nombre)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.pais)
                    .WithMany(p => p.tbMonedas)
                    .HasForeignKey(d => d.pais_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbMonedasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gral_tbMonedas_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbMonedasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbMonedas_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbNiveles>(entity =>
            {
                entity.HasKey(e => e.nive_Id);

                entity.ToTable("tbNiveles", "Gral");

                entity.HasIndex(e => e.nive_Descripcion, "UC_nive_Descripcion")
                    .IsUnique();

                entity.HasIndex(e => e.nive_Descripcion, "UQ_nive_Descripcion")
                    .IsUnique();

                entity.Property(e => e.nive_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.nive_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.nive_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.nive_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbNivelesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbNiveles_tbUsuarios_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbNivelesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_tbNiveles_tbUsuarios_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbNotificaciones>(entity =>
            {
                entity.HasKey(e => e.noti_Id);

                entity.ToTable("tbNotificaciones", "Proy");

                entity.Property(e => e.noti_Descripcion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.noti_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.noti_Fecha).HasColumnType("datetime");

                entity.Property(e => e.noti_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.noti_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.noti_Ruta)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbNotificacionesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbNotificaciones_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbNotificacionesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbNotificaciones_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbNotificacionesAlertarPorUsuario>(entity =>
            {
                entity.HasKey(e => e.napu_Id);

                entity.ToTable("tbNotificacionesAlertarPorUsuario", "Proy");

                entity.Property(e => e.napu_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.napu_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.napu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.napu_Ruta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbNotificacionesAlertarPorUsuariousua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbNotificacionesAlertarPorUsuario_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua)
                    .WithMany(p => p.tbNotificacionesAlertarPorUsuariousua)
                    .HasForeignKey(d => d.usua_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbNotificacionesAlertarPorUsuario_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbNotificacionesAlertarPorUsuariousua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbNotificacionesAlertarPorUsuario_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPagos>(entity =>
            {
                entity.HasKey(e => e.pago_Id)
                    .HasName("PK_tbPagos_pago_Id");

                entity.ToTable("tbPagos", "Proy");

                entity.Property(e => e.pago_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.pago_Fecha).HasColumnType("date");

                entity.Property(e => e.pago_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pago_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pago_Monto).HasColumnType("money");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbPagos)
                    .HasForeignKey(d => d.clie_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbPagosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Proy_tbPagos_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbPagosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbPagos_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPaises>(entity =>
            {
                entity.HasKey(e => e.pais_Id);

                entity.ToTable("tbPaises", "Gral");

                entity.HasIndex(e => e.pais_Nombre, "UQ_pais_Nombre")
                    .IsUnique();

                entity.Property(e => e.pais_Codigo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pais_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pais_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pais_Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pais_Prefijo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbPaisesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gral_tbPaises_usua_Creacion_Acce_tbUsuarios_usua_Id\n");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbPaisesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbPaises_usua_Modificacion_Acce_tbUsuarios_usua_Id\n");
            });

            modelBuilder.Entity<tbPantallas>(entity =>
            {
                entity.HasKey(e => e.pant_Id)
                    .HasName("PK_Pantallas");

                entity.ToTable("tbPantallas", "Acce");

                entity.Property(e => e.pant_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pant_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.pant_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_direccionURL).IsUnicode(false);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbPantallasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbPantallas_usua_Creacion_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbPantallasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_tbPantallas_usua_Modificacion_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPantallasPorRoles>(entity =>
            {
                entity.HasKey(e => e.paro_Id);

                entity.ToTable("tbPantallasPorRoles", "Acce");

                entity.Property(e => e.paro_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.paro_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.paro_FechaModificiacion).HasColumnType("datetime");

                entity.HasOne(d => d.pant)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.pant_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.role_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbPantallasPorRoles_usua_Creacion_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_tbPantallasPorRoles_usua_Modificacion_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPlanillaDetalles>(entity =>
            {
                entity.HasKey(e => e.plde_Id)
                    .HasName("PK_tbPlanillaDetalle");

                entity.ToTable("tbPlanillaDetalles", "Nomi");

                entity.Property(e => e.plde_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.plde_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.plde_SueldoBruto).HasColumnType("money");

                entity.Property(e => e.plde_SueldoNeto).HasColumnType("money");

                entity.Property(e => e.plde_TotalDeducciones).HasColumnType("money");

                entity.Property(e => e.plde_TotalPrestamos).HasColumnType("money");

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbPlanillaDetalles)
                    .HasForeignKey(d => d.empl_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbPlanillaDetalles_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.plan)
                    .WithMany(p => p.tbPlanillaDetalles)
                    .HasForeignKey(d => d.plan_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbPlanillaDetallesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbPlanillaDetalles_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbPlanillaDetallesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Nomi_tbPlanillaDetalles_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPlanillaDetalles_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbPlanillaDetalles_Bitacora", "Nomi");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.plde_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.plde_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.plde_SueldoBruto).HasColumnType("money");

                entity.Property(e => e.plde_SueldoNeto).HasColumnType("money");

                entity.Property(e => e.plde_TotalDeducciones).HasColumnType("money");

                entity.Property(e => e.plde_TotalPrestamos).HasColumnType("money");
            });

            modelBuilder.Entity<tbPlanillas>(entity =>
            {
                entity.HasKey(e => e.plan_Id)
                    .HasName("PK_tbPlanilla");

                entity.ToTable("tbPlanillas", "Nomi");

                entity.Property(e => e.plan_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.plan_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.plan_FechaPago).HasColumnType("date");

                entity.Property(e => e.plan_FechaPeriodoFin).HasColumnType("date");

                entity.Property(e => e.plan_Observaciones).IsUnicode(false);

                entity.HasOne(d => d.frec)
                    .WithMany(p => p.tbPlanillas)
                    .HasForeignKey(d => d.frec_Id);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbPlanillasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbPlanillas_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbPlanillasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Nomi_tbPlanillas_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPlanillas_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbPlanillas_Bitacora", "Nomi");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.plan_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.plan_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.plan_FechaPago).HasColumnType("date");

                entity.Property(e => e.plan_FechaPeriodoFin).HasColumnType("date");

                entity.Property(e => e.plan_Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<tbPrestamos>(entity =>
            {
                entity.HasKey(e => e.pres_Id)
                    .HasName("PK_tbPrestamos_pres_Id");

                entity.ToTable("tbPrestamos", "Nomi");

                entity.Property(e => e.pres_Descripcion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.pres_Estado).HasDefaultValueSql("((0))");

                entity.Property(e => e.pres_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pres_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pres_FechaPrimerPago).HasColumnType("date");

                entity.Property(e => e.pres_Monto).HasColumnType("money");

                entity.Property(e => e.pres_TasaInteres).HasColumnType("numeric(8, 5)");

                entity.Property(e => e.pres_UltimaFechaPago).IsUnicode(false);

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbPrestamos)
                    .HasForeignKey(d => d.empl_Id)
                    .HasConstraintName("FK_Nomi_tbPrestamos_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.frec)
                    .WithMany(p => p.tbPrestamos)
                    .HasForeignKey(d => d.frec_Id);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbPrestamosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbPrestamos_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbPrestamosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Nomi_tbPrestamos_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPrestamos_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbPrestamos_Bitacora", "Nomi");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.pres_Descripcion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.pres_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pres_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pres_FechaPrimerPago).HasColumnType("date");

                entity.Property(e => e.pres_Monto).HasColumnType("money");

                entity.Property(e => e.pres_TasaInteres).HasColumnType("numeric(8, 5)");

                entity.Property(e => e.pres_UltimaFechaPago).IsUnicode(false);
            });

            modelBuilder.Entity<tbPresupuestosDetalle>(entity =>
            {
                entity.HasKey(e => e.pdet_Id)
                    .HasName("PK__tbPresup__B05D1BF270039DC9");

                entity.ToTable("tbPresupuestosDetalle", "Proy");

                entity.Property(e => e.pdet_CantidadFormula)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.pdet_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pdet_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pdet_ManoObraFormula)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.pdet_MaquinariaFormula)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.pdet_MaterialFormula)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.pdet_PrecioManoObra).HasColumnType("money");

                entity.Property(e => e.pdet_PrecioMaquinaria).HasColumnType("money");

                entity.Property(e => e.pdet_PrecioMateriales).HasColumnType("money");

                entity.HasOne(d => d.acet)
                    .WithMany(p => p.tbPresupuestosDetalle)
                    .HasForeignKey(d => d.acet_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.pren)
                    .WithMany(p => p.tbPresupuestosDetalle)
                    .HasForeignKey(d => d.pren_Id);

                entity.HasOne(d => d.unme)
                    .WithMany(p => p.tbPresupuestosDetalle)
                    .HasForeignKey(d => d.unme_Id)
                    .HasConstraintName("FK_Proy_tbPresupuestosDetalle_Gral_tbUnidadesMedida_unme_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbPresupuestosDetalleusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Proy_tbPresupuestosDetalle_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbPresupuestosDetalleusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbPresupuestosDetalle_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPresupuestosEncabezado>(entity =>
            {
                entity.HasKey(e => e.pren_Id)
                    .HasName("PK__tbPresup__A45BFD21B000D064");

                entity.ToTable("tbPresupuestosEncabezado", "Proy");

                entity.Property(e => e.pren_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                //entity.Property(e => e.pren_Eliminado).HasDefaultValueSql("((1))");

                entity.Property(e => e.pren_Estado)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('P')")
                    .IsFixedLength(true);

                entity.Property(e => e.pren_Fecha).HasColumnType("date");

                entity.Property(e => e.pren_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pren_FechaModificacion).HasColumnType("datetime");

                //entity.Property(e => e.pren_Impuesto).HasColumnType("numeric(12, 2)");

                //entity.Property(e => e.pren_Maquinaria).HasDefaultValueSql("((0))");

                entity.Property(e => e.pren_Observacion)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N/A')");

                entity.Property(e => e.pren_PorcentajeGanancia).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.pren_Titulo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbPresupuestosEncabezado)
                    .HasForeignKey(d => d.clie_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbPresupuestosEncabezado_Gral_tbClientes_clie_Id");

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbPresupuestosEncabezado)
                    .HasForeignKey(d => d.empl_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbPresupuestosEncabezado_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.proy)
                    .WithMany(p => p.tbPresupuestosEncabezado)
                    .HasForeignKey(d => d.proy_Id);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbPresupuestosEncabezadousua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbPresupuestosEncabezado_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbPresupuestosEncabezadousua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbPresupuestosEncabezado_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPresupuestosPorTasasCambio>(entity =>
            {
                entity.HasKey(e => e.pptc_Id)
                    .HasName("PK__tbPresup__17BDC6596535A6D7");

                entity.ToTable("tbPresupuestosPorTasasCambio", "Proy");

                entity.Property(e => e.pptc_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pptc_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.pren)
                    .WithMany(p => p.tbPresupuestosPorTasasCambio)
                    .HasForeignKey(d => d.pren_Id);

                entity.HasOne(d => d.taca)
                    .WithMany(p => p.tbPresupuestosPorTasasCambio)
                    .HasForeignKey(d => d.taca_Id)
                    .HasConstraintName("FK_Proy_tbPresupuestosPorTasasCambio_Gral_tbTasasCambio_taca_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbPresupuestosPorTasasCambiousua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Proy_tbPresupuestosPorTasasCambio_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbPresupuestosPorTasasCambiousua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbPresupuestosPorTasasCambio_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbProcesosVentas>(entity =>
            {
                entity.HasKey(e => e.btrp_Id);

                entity.ToTable("tbProcesosVentas", "Raiz");

                entity.Property(e => e.btrp_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.btrp_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.btrp_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.btrp_FechaPuestaVenta).HasColumnType("datetime");

                entity.Property(e => e.btrp_FechaVendida).HasColumnType("datetime");

                entity.Property(e => e.btrp_PrecioVenta_Final).HasColumnType("money");

                entity.Property(e => e.btrp_PrecioVenta_Inicio).HasColumnType("money");

                entity.HasOne(d => d.agen)
                    .WithMany(p => p.tbProcesosVentas)
                    .HasForeignKey(d => d.agen_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbProcesosVentas)
                    .HasForeignKey(d => d.clie_Id)
                    .HasConstraintName("FK_ProcesosVentas_tbClientes_clie_Id_Gral_tbClientes_clie_Id");

                entity.HasOne(d => d.mant)
                    .WithMany(p => p.tbProcesosVentas)
                    .HasForeignKey(d => d.mant_Id)
                    .HasConstraintName("FK_tbProcesosVentas_tbMantenimiento_mant_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbProcesosVentasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbProcesosVentas_tbUsuarios_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbProcesosVentasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_tbProcesosVentas_tbUsuarios_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbProveedores>(entity =>
            {
                entity.HasKey(e => e.prov_Id)
                    .HasName("PK_Proveedores");

                entity.ToTable("tbProveedores", "Insu");

                entity.Property(e => e.prov_Correo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.prov_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.prov_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.prov_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.prov_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.prov_SegundoTelefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.prov_Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ciud)
                    .WithMany(p => p.tbProveedores)
                    .HasForeignKey(d => d.ciud_Id)
                    .HasConstraintName("FK_Insu_tbProovedores_Gral_tbCiudades_ciud_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbProveedoresusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbProveedores_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbProveedoresusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbProveedores_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbProyectos>(entity =>
            {
                entity.HasKey(e => e.proy_Id)
                    .HasName("PK_tbProyectos_proy_Id");

                entity.ToTable("tbProyectos", "Proy");

                entity.HasIndex(e => e.proy_Nombre, "UQ_tbProyectos_proy_Nombre")
                    .IsUnique();

                entity.Property(e => e.espr_Id).HasDefaultValueSql("((1))");

                entity.Property(e => e.proy_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.proy_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.proy_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.proy_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.proy_FechaFin).HasColumnType("date");

                entity.Property(e => e.proy_FechaInicio).HasColumnType("date");

                entity.Property(e => e.proy_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.proy_LinkUbicacion).IsUnicode(false);

                entity.Property(e => e.proy_Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.ciud)
                    .WithMany(p => p.tbProyectos)
                    .HasForeignKey(d => d.ciud_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbProyectos_Gral_tbCiudades_ciud_Id");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbProyectos)
                    .HasForeignKey(d => d.clie_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbProyectos_Gral_tbClientes_clie_Id");

                entity.HasOne(d => d.espr)
                    .WithMany(p => p.tbProyectos)
                    .HasForeignKey(d => d.espr_Id);

                entity.HasOne(d => d.tipr)
                    .WithMany(p => p.tbProyectos)
                    .HasForeignKey(d => d.tipr_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbProyectos_Gral_tbTiposProyecto_tipr_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbProyectosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Proy_tbProyectos_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbProyectosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbProyectos_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbProyectosConstruccionBienesRaices>(entity =>
            {
                entity.HasKey(e => e.pcon_Id)
                    .HasName("PK_ProyectosConstruccionBienesRaices_pcon_Id");

                entity.ToTable("tbProyectosConstruccionBienesRaices", "Raiz");

                entity.Property(e => e.pcon_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.pcon_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pcon_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.proy)
                    .WithMany(p => p.tbProyectosConstruccionBienesRaices)
                    .HasForeignKey(d => d.proy_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Raiz_tbProyectosConstruccionBienesRaices_proy_Id_Proy_tbProyectos_proy_Id");

                entity.HasOne(d => d.terr)
                    .WithMany(p => p.tbProyectosConstruccionBienesRaices)
                    .HasForeignKey(d => d.terr_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbProyectosConstruccionBienesRaices_terr_Id_tbTerrenos_terr_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbProyectosConstruccionBienesRaicesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Raiz_tbProyectosConstruccionBienesRaices_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbProyectosConstruccionBienesRaicesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Raiz_tbProyectosConstruccionBienesRaices_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbReferenciasCeldas>(entity =>
            {
                entity.HasKey(e => e.rece_Id)
                    .HasName("PK__tbRefere__7323D6DD686B6809");

                entity.ToTable("tbReferenciasCeldas", "Proy");

                entity.Property(e => e.rece_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.rece_FechaModificacion).HasColumnType("datetime");

                //entity.Property(e => e.rece_Referencia)
                //    .HasMaxLength(100)
                //    .IsUnicode(false);

                entity.Property(e => e.rece_Tipo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.acet)
                    .WithMany(p => p.tbReferenciasCeldas)
                    .HasForeignKey(d => d.acet_Id);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbReferenciasCeldasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Proy_tbReferenciasCeldas_Acce_tbUsuarios_usua_Creacion");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbReferenciasCeldasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbReferenciasCeldas_Acce_tbUsuarios_usua_Modificacion");
            });

            modelBuilder.Entity<tbRentaMaquinariasPorActividades>(entity =>
            {
                entity.HasKey(e => e.rmac_Id)
                    .HasName("PK_tbRentaMaquinariasPorActividades_rmac_Id");

                entity.ToTable("tbRentaMaquinariasPorActividades", "Proy");

                entity.Property(e => e.rmac_ActividadLlenado).HasDefaultValueSql("((0))");

                entity.Property(e => e.rmac_CantidadMaquinaFormula)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N/A')");

                entity.Property(e => e.rmac_CantidadRentaFormula)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N/A')");

                entity.Property(e => e.rmac_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.rmac_FechaContratacion).HasColumnType("datetime");

                entity.Property(e => e.rmac_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.rmac_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.rmac_PrecioRenta).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.rmac_PrecioRentaFormula)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N/A')");

                entity.HasOne(d => d.acet)
                    .WithMany(p => p.tbRentaMaquinariasPorActividades)
                    .HasForeignKey(d => d.acet_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.mapr)
                    .WithMany(p => p.tbRentaMaquinariasPorActividades)
                    .HasForeignKey(d => d.mapr_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbRentaMaquinariasPorActividades_Insu_tbMaquinariasPorProveedores_mapr_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbRentaMaquinariasPorActividadesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbRentaMaquinariasPorActividades_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbRentaMaquinariasPorActividadesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Proy_tbRentaMaquinariasPorActividades_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbRetrasos>(entity =>
            {
                entity.HasKey(e => e.retr_Id)
                    .HasName("PK_tbRetraso");

                entity.ToTable("tbRetrasos", "Proy");

                entity.Property(e => e.retr_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.retr_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.retr_Fecha).HasColumnType("datetime");

                entity.Property(e => e.retr_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.retr_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.retr_Monto).HasColumnType("money");

                entity.HasOne(d => d.Proy)
                    .WithMany(p => p.tbRetrasos)
                    .HasForeignKey(d => d.Proy_Id)
                    .HasConstraintName("FK_tbRetraso_tbProyectos_Proy_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbRetrasosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbRetrasosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion);
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.role_Id);

                entity.ToTable("tbRoles", "Acce");

                entity.HasIndex(e => e.role_Descripcion, "UQ_role_Descripcion")
                    .IsUnique();

                entity.Property(e => e.role_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.role_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.role_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.role_FechaModificiacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbRolesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_tbRoles_usua_Creacion_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbRolesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_tbRoles_usua_Modificacion_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbSubcategorias>(entity =>
            {
                entity.HasKey(e => e.suca_Id)
                    .HasName("PK_SubCategorias");

                entity.ToTable("tbSubcategorias", "Insu");

                entity.HasIndex(e => e.suca_Descripcion, "UQ_suca_Descripcion")
                    .IsUnique();

                entity.Property(e => e.suca_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.suca_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.suca_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.suca_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.cate)
                    .WithMany(p => p.tbSubcategorias)
                    .HasForeignKey(d => d.cate_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbSubcategoriasusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Insu_tbSubcategorias_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbSubcategoriasusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Insu_tbSubcategorias_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbTasasCambio>(entity =>
            {
                entity.HasKey(e => e.taca_Id)
                    .HasName("PK_tbTasasCambio_taca_Id");

                entity.ToTable("tbTasasCambio", "Gral");

                entity.HasIndex(e => new { e.mone_A, e.mone_B }, "UQ_Gral_tbTasasCambio_Gral_mone_A_Gral_mone_B")
                    .IsUnique();

                entity.Property(e => e.taca_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.taca_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.taca_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.taca_ValorA)
                    .HasColumnType("numeric(8, 2)")
                    .HasDefaultValueSql("((1.00))");

                entity.Property(e => e.taca_ValorB)
                    .HasColumnType("numeric(8, 4)")
                    .HasDefaultValueSql("((1.00))");

                entity.HasOne(d => d.mone_ANavigation)
                    .WithMany(p => p.tbTasasCambiomone_ANavigation)
                    .HasForeignKey(d => d.mone_A)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbTasasCambio_mone_A_tbMonedas_mone_Id");

                entity.HasOne(d => d.mone_BNavigation)
                    .WithMany(p => p.tbTasasCambiomone_BNavigation)
                    .HasForeignKey(d => d.mone_B)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbTasasCambio_mone_B_tbMonedas_mone_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbTasasCambiousua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gral_tbTasasCambio_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbTasasCambiousua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbTasasCambio_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbTerrenos>(entity =>
            {
                entity.HasKey(e => e.terr_Id);

                entity.ToTable("tbTerrenos", "Raiz");

                entity.Property(e => e.terr_Area)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.terr_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.terr_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.terr_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.terr_Identificador).HasDefaultValueSql("((0))");

                entity.Property(e => e.terr_Imagen).IsUnicode(false);

                entity.Property(e => e.terr_Latitud).IsUnicode(false);

                entity.Property(e => e.terr_LinkUbicacion).IsUnicode(false);

                entity.Property(e => e.terr_Longitud).IsUnicode(false);

                entity.Property(e => e.terr_PecioCompra)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.terr_PrecioVenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbTerrenosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Raiz_tbTerrenos_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbTerrenosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Raiz_tbTerrenos_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbTiposDocumentos>(entity =>
            {
                entity.HasKey(e => e.tido_Id)
                    .HasName("PK_TiposDocumentos_tido_Id");

                entity.ToTable("tbTiposDocumentos", "Raiz");

                entity.Property(e => e.tido_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.tido_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.tido_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.tido_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbTiposDocumentosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Raiz_tbTipoDocumento_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_MofificacionNavigation)
                    .WithMany(p => p.tbTiposDocumentosusua_MofificacionNavigation)
                    .HasForeignKey(d => d.usua_Mofificacion)
                    .HasConstraintName("FK_Raiz_tbTipoDocumento_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbTiposProyecto>(entity =>
            {
                entity.HasKey(e => e.tipr_Id)
                    .HasName("PK_tbTiposProyecto_tipr_Id");

                entity.ToTable("tbTiposProyecto", "Gral");

                entity.HasIndex(e => e.tipr_Descripcion, "UQ_tbTiposProyecto_tipr_Descripcion")
                    .IsUnique();

                entity.Property(e => e.tipr_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.tipr_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.tipr_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.tipr_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbTiposProyectousua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gral_tbTiposProyecto_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbTiposProyectousua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbTiposProyecto_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbTokens>(entity =>
            {
                entity.HasKey(e => e.tokn_Id)
                    .HasName("PK_tbTokens_Token_Id");

                entity.ToTable("tbTokens", "Proy");

                entity.Property(e => e.tokn_JsonToken)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.tokn_SesionWeb).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.usua)
                    .WithMany(p => p.tbTokens)
                    .HasForeignKey(d => d.usua_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proy_tbTokens_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbUnidadesMedida>(entity =>
            {
                entity.HasKey(e => e.unme_Id);

                entity.ToTable("tbUnidadesMedida", "Gral");

                entity.Property(e => e.unme_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.unme_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.unme_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.unme_Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.unme_Nomenclatura)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbUnidadesMedidausua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .HasConstraintName("FK_Gral_tbUnidadesMedida_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbUnidadesMedidausua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Gral_tbUnidadesMedida_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.usua_Id);

                entity.ToTable("tbUsuarios", "Acce");

                entity.HasIndex(e => e.usua_Usuario, "UQ_usua_Usuario")
                    .IsUnique();

                entity.Property(e => e.usua_Clave)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsFixedLength(true);

                //entity.Property(e => e.usua_CodigoReestablecer)
                //    .HasMaxLength(6)
                //    .IsUnicode(false);

                entity.Property(e => e.usua_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.usua_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.usua_FechaModificacion).HasColumnType("datetime");

                //entity.Property(e => e.usua_ObservacionActivar).IsUnicode(false);

                entity.Property(e => e.usua_ObservacionInactivar).IsUnicode(false);

                entity.Property(e => e.usua_Usuario)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.empl_Id)
                    .HasConstraintName("FK_Acce_tbUsuarios_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.role_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.Inverseusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbUsuarios_usua_Creacion_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.Inverseusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_tbUsuarios_usua_Modificacion_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbViaticosDetalles>(entity =>
            {
                entity.HasKey(e => e.vide_Id);

                entity.ToTable("tbViaticosDetalles", "Nomi");

                entity.Property(e => e.vide_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.vide_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.vide_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.vide_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.vide_ImagenFactura)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.vide_MontoGastado)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.vide_MontoReconocido).HasColumnType("numeric(8, 2)");

                entity.HasOne(d => d.cavi)
                    .WithMany(p => p.tbViaticosDetalles)
                    .HasForeignKey(d => d.cavi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbViaticosDetallesusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbViaticosDetalles_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbViaticosDetallesusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Nomi_tbViaticosDetalles_usua_Modificacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.vien)
                    .WithMany(p => p.tbViaticosDetalles)
                    .HasForeignKey(d => d.vien_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbViaticosDetalles_tbViatcosEncabezados_vien_Id");
            });

            modelBuilder.Entity<tbViaticosDetalles_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbViaticosDetalles_Bitacora", "Nomi");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.vide_Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.vide_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.vide_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.vide_ImagenFactura)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.vide_MontoGastado)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.vide_MontoReconocido).HasColumnType("numeric(8, 2)");
            });

            modelBuilder.Entity<tbViaticosEncabezados>(entity =>
            {
                entity.HasKey(e => e.vien_Id)
                    .HasName("PK_tbViatcosEncabezados");

                entity.ToTable("tbViaticosEncabezados", "Nomi");

                entity.Property(e => e.vien_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.vien_FechaEmicion).HasColumnType("datetime");

                entity.Property(e => e.vien_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.vien_MontoEstimado).HasColumnType("money");

                entity.Property(e => e.vien_TotalGastado).HasColumnType("money");

                entity.Property(e => e.vien_TotalReconocido).HasColumnType("numeric(8, 2)");

                entity.HasOne(d => d.Proy)
                    .WithMany(p => p.tbViaticosEncabezados)
                    .HasForeignKey(d => d.Proy_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbViatcosEncabezados_Proy_tbProyectos_proy_Id");

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbViaticosEncabezados)
                    .HasForeignKey(d => d.empl_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbViaticosEncabezados_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.usua_CreacionNavigation)
                    .WithMany(p => p.tbViaticosEncabezadosusua_CreacionNavigation)
                    .HasForeignKey(d => d.usua_Creacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Nomi_tbViaticosEncabezados_usua_Creacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_ModificacionNavigation)
                    .WithMany(p => p.tbViaticosEncabezadosusua_ModificacionNavigation)
                    .HasForeignKey(d => d.usua_Modificacion)
                    .HasConstraintName("FK_Nomi_tbViaticosEncabezados_usua_Modificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbViaticosEncabezados_Bitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbViaticosEncabezados_Bitacora", "Nomi");

                entity.Property(e => e.accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.vien_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.vien_FechaEmicion).HasColumnType("datetime");

                entity.Property(e => e.vien_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.vien_MontoEstimado).HasColumnType("money");

                entity.Property(e => e.vien_TotalGastado).HasColumnType("money");

                entity.Property(e => e.vien_TotalReconocido).HasColumnType("numeric(8, 2)");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}